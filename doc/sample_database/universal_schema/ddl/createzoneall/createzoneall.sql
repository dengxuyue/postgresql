/*
 ZONENAME     : UNIVERSAL_SCHEMA.ADW44
 GENERATED BY : Quantum China Beijing R&D
 DATE         : Mon Mar  8 18:26:03 2010
 COPYRIGHT (C) 2010 BY TERADATA CORP.
*/

CREATE SCHEMA UNIVERSAL_SCHEMA;

CREATE TABLE UNIVERSAL_SCHEMA.DEMOGRAPHICS
(
    ZIPCODE              CHAR(5) NOT NULL,
    PRIMARYRECORD        CHAR(1) NULL,
    POPULATION           DECIMAL(18,2) NULL,
    HOUSEHOLDSPERZIPCODE DECIMAL(18,2) NULL,
    WHITEPOPULATION      DECIMAL(18,2) NULL,
    BLACKPOPULATION      DECIMAL(18,2) NULL, 
    HISPANICPOPULATION   DECIMAL(18,2) NULL,
    PERSONSPERHOUSEHOLD  DECIMAL(18,2) NULL,
    AVERAGEHOUSEVALUE    DECIMAL(18,2) NULL,
    INCOMEPERHOUSEHOLD   DECIMAL(18,2) NULL,
    LATITUDE             DECIMAL(18,2) NULL,
    LONGITUDE            DECIMAL(18,2) NULL,
    ELEVATION            DECIMAL(18,2) NULL,
    STATE                CHAR(2) NULL,
    STATEFULLNAME        VARCHAR(35) NULL,
    CITYTYPE             CHAR(1) NULL,
    CITYALIASABBREVIATION VARCHAR(13) NULL,
    AREACODE             VARCHAR(55) NULL,
    CITY                 VARCHAR(35) NULL,
    CITYALIASNAME        VARCHAR(35) NULL,
    COUNTYNAME           VARCHAR(45) NULL,
    COUNTYFIPS           CHAR(5) NULL,
    STATEFIPS            CHAR(2) NULL,
    TIMEZONE             CHAR(2) NULL,
    DAYLIGHTSAVING       CHAR(1) NULL,
    MSA                  VARCHAR(35) NULL,
    MSA_NAME             VARCHAR(150) NULL,
    PMSA                 CHAR(4) NULL,
    CSA                  CHAR(3) NULL,
    CBSA                 CHAR(5) NULL,
    CBSA_DIV             CHAR(5) NULL,
    CBSA_TYPE            CHAR(5) NULL,
    CBSA_NAME            VARCHAR(150) NULL,
    PMSA_NAME            VARCHAR(150) NULL,
    REGION               VARCHAR(10) NULL,
    DIVISION             VARCHAR(20) NULL,
    MAILINGNAME          CHAR(1) NULL,
    POPULATIONSF3        DECIMAL(18,2) NULL,
    HOUSEHOLDSPERZIPCODESF3 DECIMAL(18,2) NULL,
    WHITEPOPULATIONSF3   DECIMAL(18,2) NULL,
    BLACKPOPULATIONSF3   DECIMAL(18,2) NULL,
    HISPANICPOPULATIONSF3 DECIMAL(18,2) NULL,
    PERSONSPERHOUSEHOLDSF3 DECIMAL(18,2) NULL,
    AVERAGEHOUSEVALUESF3 DECIMAL(18,2) NULL,
    INCOMEPERHOUSEHOLDSF3 DECIMAL(18,2) NULL,
    ESTABLISHMENTS2003   INTEGER NULL,
    EMPLOYMENT2003       INTEGER NULL,
    FIRSTQUARTERPAYROLL2003 INTEGER NULL,
    ANNUALPAYROLL2003    INTEGER NULL,
    EMPLYMENTFLAG2003    CHAR(1) NULL 
);
--PARTITION BY(
--        HASHBUCKET(HASHROW(ZIPCODE)) MOD 20 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.PARTY
(
    PARTY_ID             CHAR(10) NOT NULL PRIMARY KEY,
    PARTY_TYPE_CD        CHAR(4) NOT NULL,
    PARTY_FIRSTNAME      VARCHAR(20) NULL,
    PARTY_LASTNAME       VARCHAR(20) NULL,
    PARTY_STREET_ADDRESS VARCHAR(50) NULL,
    PARTY_CITY           CHAR(30) NULL,
    PARTY_STATE          CHAR(2) NULL,
    PARTY_ZIP            CHAR(5) NULL,
    PARTY_INFO_SOURCE_TYPE_CD CHAR(4) NULL,
    PARTY_START_DT       DATE NULL,
    PARTY_FIRST_PURCHASE_DT DATE NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(PARTY_ID)) MOD 10 + 1

CREATE TABLE UNIVERSAL_SCHEMA.BRAND_OWNER_ORG
(
    BRAND_PARTY_ID       INTEGER NOT NULL PRIMARY KEY
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(BRAND_PARTY_ID)) MOD 10 + 1
--);      

CREATE TABLE UNIVERSAL_SCHEMA.BRAND
(
    MFG                  VARCHAR(50) NOT NULL,
    BRAND_CD             VARCHAR(50) NOT NULL PRIMARY KEY,
    BRAND_NAME           VARCHAR(100) NOT NULL,
    BRAND_PARTY_ID       INTEGER NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(BRAND_CD)) MOD 10 + 1
--);

CREATE TABLE UNIVERSAL_SCHEMA.ITEM
(
    ITEM_ID              VARCHAR(20) NOT NULL PRIMARY KEY,
    ITEM_NAME            VARCHAR(100) NULL,
    ITEM_DESC            VARCHAR(250) NULL,
    ITEM_SUBCLASS_CD     VARCHAR(50) NULL,
    ITEM_TYPE_CD         VARCHAR(50) NULL,
    INVENTORY_IND        CHAR(3) NULL,
    VENDOR_PARTY_ID      INTEGER NULL,
    COMMODITY_CD         VARCHAR(50) NULL,
    BRAND_CD             VARCHAR(50) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(ITEM_ID)) MOD 10 + 1
--);      

CREATE TABLE UNIVERSAL_SCHEMA.ITEM_PRICE_HISTORY
(
    ITEM_ID              VARCHAR(20) NOT NULL PRIMARY KEY,
    ITEM_PRICE_START_DT  DATE NOT NULL,
    PRICE_CHANGE_REASON_CD VARCHAR(50) NULL,
    ITEM_PRICE_AMT       DECIMAL(18,2) NULL,
    CURRENT_INDICATOR    CHAR(1) NULL,
    LOCATION_ID          INTEGER NULL 
);
--PARTITION BY(
--    /* PATITION EXPRESSIONS <TEMPLETED>*/
--    CASE_N(
--        0   <= LOCATION_ID AND LOCATION_ID < 50,
--        50  <= LOCATION_ID AND LOCATION_ID < 100,
--        100 <= LOCATION_ID AND LOCATION_ID < 150,
--        150 <= LOCATION_ID AND LOCATION_ID < 200,
--        NO CASE OR UNKNOWN
--    ),
--    RANGE_N(ITEM_PRICE_START_DT BETWEEN '2005-01-01' AND '2010-01-01' EACH INTERVAL '1' MONTH)

CREATE TABLE UNIVERSAL_SCHEMA.PRICE_CHANGE_REASON
(
    PRICE_CHANGE_REASON_CD VARCHAR(50) NOT NULL PRIMARY KEY,
    PRICE_CHANGE_REASON_DESC VARCHAR(250) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(PRICE_CHANGE_REASON_CD)) MOD 10 + 1
--);      

CREATE TABLE UNIVERSAL_SCHEMA.ITEM_TRAIT
(
    ITEM_ID              VARCHAR(20) NOT NULL PRIMARY KEY,
    TRAIT_VALUE_CD       VARCHAR(50) NOT NULL,
    TRAIT_CD             VARCHAR(50) NULL 
--  PARTITION BY(
--      HASHBUCKET(HASHROW(ITEM_ID)) MOD 10 + 1
); 
     

CREATE TABLE UNIVERSAL_SCHEMA.TRAIT
(
    TRAIT_CD             VARCHAR(50) NOT NULL PRIMARY KEY,
    TRAIT_DESC           VARCHAR(250) NULL,
    TRAIT_GROUP_CD       VARCHAR(50) NOT NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(TRAIT_CD)) MOD 10 + 1
--);      

CREATE TABLE UNIVERSAL_SCHEMA.TRAIT_GROUP
(
    TRAIT_GROUP_CD       VARCHAR(50) NOT NULL PRIMARY KEY,
    TRAIT_GROUP_DESC     VARCHAR(250) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(TRAIT_GROUP_CD)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.TRAIT_VALUE
(
    TRAIT_VALUE_CD       VARCHAR(50) NOT NULL PRIMARY KEY,
    TRAIT_VALUE_DESC     VARCHAR(250) NULL,
    TRAIT_VAL            VARCHAR(100) NULL,
    UOM_CD               VARCHAR(50) NULL,
    TRAIT_CD             VARCHAR(50) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(TRAIT_VALUE_CD)) MOD 10 + 1
--);      

CREATE TABLE UNIVERSAL_SCHEMA.RETURN_REASON
(
    RETURN_REASON_CD     VARCHAR(50) NOT NULL PRIMARY KEY,
    RETURN_REASON_DESC   VARCHAR(250) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(RETURN_REASON_CD)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.SALES_TRANSACTION
(
    SALES_TRAN_ID        INTEGER NOT NULL PRIMARY KEY,
    VISIT_ID             INTEGER NULL, 
    TRAN_STATUS_CD       CHAR(1) NULL,
    REPORTED_AS_DTTM     TIMESTAMP(6) NULL, 
    TRAN_TYPE_CD         CHAR(1) NULL,
    MKB_COST_AMT         DECIMAL(18,4) NULL,
    MKB_ITEM_QTY         DECIMAL(18,4) NULL,
    MKB_NUMBER_UNIQUE_ITEMS_QTY DECIMAL(18,4) NULL,
    MKB_REV_AMT          DECIMAL(18,4) NULL,
    ASSOCIATE_PARTY_ID   INTEGER NULL,
    TRAN_START_DTTM_DD   TIMESTAMP(6) NULL,
    TRAN_DATE            DATE NULL,
    TRAN_END_DTTM_DD     TIMESTAMP(6) NULL,
    TRAN_END_HOUR        INTEGER NULL,
    TRAN_END_MINUTE      INTEGER NULL,
    REWARD_CD            VARCHAR(10) NULL
);
--PARTITION BY(
--    /* PATITION EXPRESSIONS <TEMPLETED>*/
--    RANGE_N(ASSOCIATE_PARTY_ID BETWEEN 10000 AND 20400 EACH 400),
--    RANGE_N(TRAN_DATE BETWEEN '2005-01-01' AND '2010-01-01' EACH INTERVAL '1' MONTH)
--);

CREATE TABLE UNIVERSAL_SCHEMA.RETURN_TRANSACTION_LINE
(
    SALES_TRAN_ID        INTEGER NOT NULL PRIMARY KEY,
    RETURN_TRAN_LINE_NUM VARCHAR(3) NOT NULL,
    RETURNED_ITEM_ID     VARCHAR(20) NOT NULL,
    RETURN_ITEM_QTY      DECIMAL(18,4) NOT NULL,
    UNIT_REFUND_AMT      DECIMAL(18,4) NULL,
    ORIGINAL_SALES_TRAN_ID INTEGER NULL,
    ORIGINAL_SALES_TRAN_LINE_NUM VARCHAR(4) NULL,
    RETURN_TRAN_LINE_START_DTTM TIMESTAMP(6) NULL,
    RETURN_TRAN_LINE_END_DTTM TIMESTAMP(6) NULL,
    TRAN_LINE_STATUS_CD  CHAR(1) NULL,
    RETURN_REASON_CD     VARCHAR(50) NULL,
    LOCATION_ID          INTEGER NULL 
);
--PARTITION BY(
--   /* PATITION EXPRESSIONS <TEMPLETED> initially we partition on COLUMN:RETURN_TRAN_LINE_START_DTTM, for 13.10m it is not allowed*/
--   RANGE_N(LOCATION_ID BETWEEN 0 AND 206 EACH 10),
--   CASE_N(
--       HASHBUCKET(HASHROW(RETURNED_ITEM_ID)) MOD 5 = 0,
--       HASHBUCKET(HASHROW(RETURNED_ITEM_ID)) MOD 5 = 1,
--       HASHBUCKET(HASHROW(RETURNED_ITEM_ID)) MOD 5 = 2,
--       HASHBUCKET(HASHROW(RETURNED_ITEM_ID)) MOD 5 = 3,
--       HASHBUCKET(HASHROW(RETURNED_ITEM_ID)) MOD 5 = 4,
--       NO CASE, UNKNOWN
--   )
--); 

CREATE TABLE UNIVERSAL_SCHEMA.SALES_TRANSACTION_LINE
(
    SALES_TRAN_ID        INTEGER NOT NULL,
    SALES_TRAN_LINE_NUM  SMALLINT NOT NULL,
    ITEM_ID              VARCHAR(20) NULL,
    ITEM_QTY             DECIMAL(5) NOT NULL,
    UNIT_SELLING_PRICE_AMT DECIMAL(8,4) NOT NULL,
    UNIT_COST_AMT        DECIMAL(8,4) NULL,
    TRAN_LINE_STATUS_CD  CHAR(1) NULL,
    SALES_TRAN_LINE_START_DTTM TIMESTAMP(6) NULL,
    TRAN_LINE_SALES_TYPE_CD CHAR(2) NULL,
    SALES_TRAN_LINE_END_DTTM TIMESTAMP(6) NULL,
    TRAN_LINE_DATE       DATE NULL,
    TX_TIME              TIME NOT NULL,
    LOCATION             INTEGER NULL 
);
--PARTITION BY(
--    /* PATITION EXPRESSIONS <TEMPLETED>*/
--    RANGE_N(LOCATION BETWEEN 0 AND 206 EACH 10),
--    CASE_N(
--        HASHBUCKET(HASHROW(ITEM_ID)) MOD 5 = 0,
--        HASHBUCKET(HASHROW(ITEM_ID)) MOD 5 = 1,
--        HASHBUCKET(HASHROW(ITEM_ID)) MOD 5=  2,
--        HASHBUCKET(HASHROW(ITEM_ID)) MOD 5 = 3,
--        HASHBUCKET(HASHROW(ITEM_ID)) MOD 5 = 4,
--        NO CASE, UNKNOWN
--    ),
--    RANGE_N(TRAN_LINE_DATE BETWEEN '2005-01-01' AND '2010-01-01' EACH INTERVAL '1' MONTH)
--);

CREATE TABLE UNIVERSAL_SCHEMA.PROMO_TYPE
(
    PROMO_TYPE_NAME      VARCHAR(30) NULL,
    PROMO_TYPE_ID        CHAR(2) NOT NULL PRIMARY KEY 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(PROMO_TYPE_ID)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.CURRENT_PROMO
(
    PROMO_NAME           VARCHAR(30) NULL,
    PROMO_ID             VARCHAR(10) NOT NULL PRIMARY KEY,
    PROMO_TYPE           CHAR(2) NULL,
    PROMO_DESC           VARCHAR(100) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(PROMO_ID)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.ALL_DIVISIONS
(
    ALL_DIVISIONS_CD     VARCHAR(50) NOT NULL PRIMARY KEY,
    ALL_DIVISIONS_NAME   VARCHAR(100) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(ALL_DIVISIONS_CD)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.DIVISION
(
    DIVISION_CD          VARCHAR(50) NOT NULL PRIMARY KEY,
    DIVISION_NAME        VARCHAR(100) NOT NULL,
    ALL_DIVISIONS_CD     VARCHAR(50) NOT NULL,
    DIVISION_MGR_ASSOCIATE_ID INTEGER NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(DIVISION_CD)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.REGION
(
    REGION_CD            VARCHAR(50) NOT NULL PRIMARY KEY,
    REGION_NAME          VARCHAR(100) NOT NULL,
    DIVISION_CD          VARCHAR(50) NOT NULL,
    REGION_MGR_ASSOCIATE_ID INTEGER NULL 
);
--PARTITION BY(
--        HASHBUCKET(HASHROW(REGION_CD)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.DISTRICT
(
    DISTRICT_CD          VARCHAR(50) NOT NULL PRIMARY KEY,
    DISTRICT_NAME        VARCHAR(100) NULL,
    REGION_CD            VARCHAR(50) NOT NULL,
    DISTRICT_MGR_ASSOCIATE_ID INTEGER NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(DISTRICT_CD)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.COST_TYPE
(
    COST_TYPE_CD         VARCHAR(50) NOT NULL PRIMARY KEY,
    COST_TYPE_DESC       VARCHAR(250) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(COST_TYPE_CD)) MOD 10 + 1
--);      

CREATE TABLE UNIVERSAL_SCHEMA.COST
(
    COST_CD              VARCHAR(50) NOT NULL PRIMARY KEY,
    COST_DESC            VARCHAR(250) NULL,
    COST_TYPE_CD         VARCHAR(50) NOT NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(COST_CD)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.OFFERS_20050701
(
    PROMO_ID             VARCHAR(10) NOT NULL PRIMARY KEY,
    PARTY_ID             VARCHAR(10) NULL,
    LOCATION_ID          INTEGER NULL,
    PARTY_FIRSTNAME      VARCHAR(20) NULL,
    PARTY_LASTNAME       VARCHAR(20) NULL,
    VISITS               INTEGER NULL,
    CLUB_LEVEL           CHAR(7) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(PROMO_ID)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.LOCATION_TYPE
(
    LOCATION_TYPE_CD     VARCHAR(50) NOT NULL PRIMARY KEY,
    LOCATION_TYPE_DESC   VARCHAR(250) NOT NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(LOCATION_TYPE_CD)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.CHANNEL
(
    CHANNEL_CD           VARCHAR(50) NOT NULL PRIMARY KEY,
    CHANNEL_DESC         VARCHAR(250) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(CHANNEL_CD)) MOD 10 + 1
--);

CREATE TABLE UNIVERSAL_SCHEMA.LOCATION
(
    LOCATION_ID          INTEGER NOT NULL PRIMARY KEY,
    LOCATION_NAME        CHAR(40) NULL,
    LOCATION_OPEN_DT     DATE NULL,
    LOCATION_CLOSE_DT    DATE NULL,
    LOCATION_EFFECTIVE_DT DATE NULL, 
    LOCATION_TOTAL_AREA_MEAS DECIMAL(18,4) NULL,
    CHAIN_CD             VARCHAR(50) NULL,
    CHANNEL_CD           VARCHAR(50) NULL,
    DISTRICT_CD          VARCHAR(50) NULL,
    PARENT_LOCATION_ID   INTEGER NULL,
    LOCATION_MGR_ASSOCIATE_ID INTEGER NULL,
    LOCATION_TYPE_CD     VARCHAR(50) NULL 
);
--PARTITION BY(
--    LOCATION_ID MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.WORK_SHIFT
(
    WORK_SHIFT_CD        VARCHAR(50) NOT NULL PRIMARY KEY,
    WORK_SHIFT_DESC      VARCHAR(250) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(WORK_SHIFT_CD)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.LOCATION_PLAN
(
    LOCATION_ID          INTEGER NOT NULL,
    COST_CD              VARCHAR(50) NOT NULL,
    PERIOD_START_DT      DATE NOT NULL,
    PERIOD_END_DT        DATE NULL,
    ACTUAL_COST_AMT      DECIMAL(18,4) NULL,
    PLAN_COST_AMT        DECIMAL(18,4) NULL,
    PRIMARY KEY 
    (
         LOCATION_ID,
         COST_CD,
         PERIOD_START_DT
    )
 );
--PARTITION BY(
--    /* PATITION EXPRESSIONS <TEMPLETED>*/
--    RANGE_N(PERIOD_START_DT BETWEEN '2005-01-01' AND '2010-01-01' EACH INTERVAL '1' MONTH,
--        NO RANGE, UNKNOWN),
--    CASE_N(
--        0   <= LOCATION_ID AND LOCATION_ID < 50,
--        50  <= LOCATION_ID AND LOCATION_ID < 100,
--        100 <= LOCATION_ID AND LOCATION_ID < 150,
--        150 <= LOCATION_ID AND LOCATION_ID < 200,
--        NO CASE OR UNKNOWN
--    )    
--);

CREATE TABLE UNIVERSAL_SCHEMA.ALERT_EMAILS
(
    ITEM_ID              VARCHAR(20) NOT NULL PRIMARY KEY,
    READY_DATE           DATE NOT NULL,
    STATUS               SMALLINT NOT NULL,
    LOCATION_ID          INTEGER NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(ITEM_ID)) MOD 100 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.JOB_CLASSIFICATION
(
    JOB_CLASSIFICATION_CD VARCHAR(50) NOT NULL PRIMARY KEY,
    JOB_CLASSIFICATION_DESC VARCHAR(250) NULL 
);
--PARTITION BY(
--    HASHBUCKET(HASHROW(JOB_CLASSIFICATION_CD)) MOD 10 + 1
--); 

CREATE TABLE UNIVERSAL_SCHEMA.LABOR_PLAN
(
    LOCATION_ID          INTEGER NOT NULL,
    JOB_CLASSIFICATION_CD VARCHAR(50) NOT NULL,
    WORK_SHIFT_CD        VARCHAR(50) NOT NULL,
    PLAN_PERIOD_START_DT DATE NOT NULL,
    PLAN_PERIOD_END_DT   DATE NULL,
    PLAN_HOURS_QTY       DECIMAL(18,4) NULL,
    PLAN_COST_AMT        DECIMAL(18,4) NULL,
    PLAN_OVERTIME_HOURS_QTY DECIMAL(18,4) NULL,
    PLAN_OVERTIME_COST_AMT DECIMAL(18,4) NULL,
    PRIMARY KEY
    (
         LOCATION_ID,
         JOB_CLASSIFICATION_CD,
         WORK_SHIFT_CD,
         PLAN_PERIOD_START_DT
    )
);
--PARTITION BY(
--    /* PATITION EXPRESSIONS <TEMPLETED>*/
--    RANGE_N(PLAN_PERIOD_START_DT BETWEEN '2005-01-01' AND '2010-01-01' EACH INTERVAL '1' MONTH,
--        NO RANGE, UNKNOWN),
--    CASE_N(
--        0   <= LOCATION_ID AND LOCATION_ID < 50,
--        50  <= LOCATION_ID AND LOCATION_ID < 100,
--        100 <= LOCATION_ID AND LOCATION_ID < 150,
--        150 <= LOCATION_ID AND LOCATION_ID < 200,
--        NO CASE OR UNKNOWN
--    )    
--); 

CREATE TABLE UNIVERSAL_SCHEMA.ITEM_STORE_SOLD
(
    PRODUCT_ID           DECIMAL(15) NULL,
    WEEK_OF_YEAR         INTEGER NULL,
    ON_HAND_QTY          INTEGER NULL,
    HAND_RETAIL_AMT      DECIMAL(18,2) NULL,
    PLAN_QTY             INTEGER NULL,
    PLAN_RETAIL_AMT      DECIMAL(18,2) NULL,
    QTY_SOLD             INTEGER NULL,
    REVENUE              DECIMAL(18,2) NULL,
    LOCATION_ID          INTEGER NULL,
    PRIMARY KEY
    (
         PRODUCT_ID,
         WEEK_OF_YEAR,
         LOCATION_ID
    ) 
);

CREATE TABLE UNIVERSAL_SCHEMA.ITEM_INVENTORY_PLAN
(
    ITEM_INVENTORY_PLAN_DT DATE NOT NULL,
    LOCATION_ID          INTEGER NOT NULL,
    ITEM_ID              VARCHAR(20) NOT NULL,
    PLAN_ON_HAND_QTY     DECIMAL(18,4) NULL,
    PLAN_ON_HAND_RETAIL_AMT DECIMAL(18,4) NULL,
    PRIMARY KEY
    (
         ITEM_INVENTORY_PLAN_DT,
         LOCATION_ID,
         ITEM_ID
    )
);
--PARTITION BY(
--    /* PATITION EXPRESSIONS <TEMPLETED>*/
--    CASE_N(
--        0   <= LOCATION_ID AND LOCATION_ID < 50,
--        50  <= LOCATION_ID AND LOCATION_ID < 100,
--        100 <= LOCATION_ID AND LOCATION_ID < 150,
--        150 <= LOCATION_ID AND LOCATION_ID < 200,
--        NO CASE, UNKNOWN
--    ),
--    RANGE_N(ITEM_INVENTORY_PLAN_DT BETWEEN '2005-01-01' AND '2010-01-01' EACH INTERVAL '1' MONTH)
--);

CREATE TABLE UNIVERSAL_SCHEMA.ITEM_INVENTORY
(
    LOCATION_ID          INTEGER NOT NULL,
    ITEM_INV_DT          DATE NOT NULL,
    ITEM_ID              VARCHAR(20) NOT NULL,
    ON_HAND_UNIT_QTY     DECIMAL(18,4) NOT NULL,
    ON_HAND_AT_RETAIL_AMT DECIMAL(18,4) NOT NULL,
    ON_HAND_COST_AMT     DECIMAL(18,4) NOT NULL,
    ON_ORDER_QTY         DECIMAL(18,4) NULL,
    LOST_SALES_DAY_IND   CHAR(3) NULL,
    PRIMARY KEY
    (
         LOCATION_ID,
         ITEM_INV_DT,
         ITEM_ID
    )
);
--PARTITION BY(
--    /* PATITION EXPRESSIONS <TEMPLETED>*/
--    RANGE_N(
--        LOCATION_ID BETWEEN 0 AND 210 EACH 5,
--        NO RANGE, UNKNOWN
--    ),
--    RANGE_N(ITEM_INV_DT BETWEEN '2005-01-01' AND '2010-01-01' EACH INTERVAL '1' MONTH)
--);

CREATE TABLE UNIVERSAL_SCHEMA.ALL_ITEM_DIVISIONS
(
    ALL_ITEM_DIVISIONS_CD VARCHAR(50) NOT NULL PRIMARY KEY,
    ALL_ITEM_DIVISIONS_NAME VARCHAR(100) NULL 
);

CREATE TABLE UNIVERSAL_SCHEMA.ITEM_DIVISION
(
    ITEM_DIVISION_CD     VARCHAR(3) NOT NULL PRIMARY KEY,
    ITEM_DIVISION_NAME   VARCHAR(100) NULL,
    ITEM_DIVISION_MGR_ASSOCIATE_ID INTEGER NULL,
    ALL_ITEM_DIVISIONS_CD VARCHAR(50) NOT NULL 
);

CREATE TABLE UNIVERSAL_SCHEMA.POSITION_GRADE
(
    POSITION_GRADE_CD    VARCHAR(50) NOT NULL PRIMARY KEY,
    POSITION_GRADE_DESC  VARCHAR(250) NOT NULL 
);

CREATE TABLE UNIVERSAL_SCHEMA.POSITION_TYPE
(
    POSITION_TYPE_CD     VARCHAR(50) NOT NULL PRIMARY KEY,
    POSITION_TYPE_DESC   VARCHAR(250) NULL 
);

CREATE TABLE UNIVERSAL_SCHEMA.ASSOCIATE_POSITION
(
    POSITION_ID          INTEGER NOT NULL PRIMARY KEY,
    POSITION_DESC        VARCHAR(250) NULL,
    WAGE_RATE_AMT        DECIMAL(18,4) NOT NULL,
    OVERTIME_RATE_PCT    DECIMAL(9,4) NULL,
    POSITION_GRADE_CD    VARCHAR(50) NULL,
    POSITION_TYPE_CD     VARCHAR(50) NULL,
    JOB_CLASSIFICATION_CD VARCHAR(50) NULL 
);

CREATE TABLE UNIVERSAL_SCHEMA.ASSOCIATE
(
    ASSOCIATE_PARTY_ID   INTEGER NOT NULL PRIMARY KEY,
    MANAGER_ASSOCIATE_ID INTEGER NULL,
    POSITION_ID          INTEGER NULL,
    LOCATION_ID          INTEGER NULL,
    ASSOC_HR_NUM         VARCHAR(50) NULL,
    ASSOC_HIRE_DT        DATE NULL,
    ASSOC_TERMINATION_DT DATE NULL 
);

CREATE TABLE UNIVERSAL_SCHEMA.ASSOCIATE_EXPENSE_TYPE
(
    ASSOCIATE_EXPNS_TYPE_CD VARCHAR(50) NOT NULL PRIMARY KEY,
    ASSOC_EXPNS_TYPE_DESC VARCHAR(250) NULL 
);

CREATE TABLE UNIVERSAL_SCHEMA.ASSOCIATE_BENEFIT_EXPENSE
(
    PERIOD_END_DT        DATE NOT NULL,
    ASSOCIATE_EXPNS_TYPE_CD VARCHAR(50) NOT NULL,
    ASSOCIATE_PARTY_ID   INTEGER NOT NULL,
    BENEFIT_HOURS_QTY    DECIMAL(18,4) NULL,
    BENEFIT_COST_AMT     DECIMAL(18,4) NULL, 
    PRIMARY KEY
    (
         PERIOD_END_DT,
         ASSOCIATE_EXPNS_TYPE_CD,
         ASSOCIATE_PARTY_ID
    )
);
--PARTITION BY(
--    /* PATITION EXPRESSIONS <TEMPLETED>*/
--    CASE_N(
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 1,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 2,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 3,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 4,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 5,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 6,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 7,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 8,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 9,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 10,
--        NO CASE, UNKNOWN
--    ),
--    RANGE_N(PERIOD_END_DT BETWEEN '2005-01-01' AND '2010-01-01' EACH INTERVAL '1' MONTH,
--    NO RANGE, UNKNOWN)  --MONTH        
--);

CREATE TABLE UNIVERSAL_SCHEMA.ASSOCIATE_LABOR_EXPENSE
(
    PERIOD_END_DT        DATE NOT NULL,
    ASSOCIATE_EXPNS_TYPE_CD VARCHAR(50) NOT NULL,
    ASSOCIATE_PARTY_ID   INTEGER NOT NULL,
    LABOR_HOURS_QTY      DECIMAL(18,4) NULL,
    LABOR_COST_AMT       DECIMAL(18,4) NULL, 
    PRIMARY KEY 
    (
         PERIOD_END_DT,
         ASSOCIATE_EXPNS_TYPE_CD,
         ASSOCIATE_PARTY_ID
    )
);
--PARTITION BY(
--    /* PATITION EXPRESSIONS <TEMPLETED>*/
--    CASE_N(
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 1,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 2,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 3,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 4,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 5,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 6,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 7,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 8,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 9,
--        CAST(ASSOCIATE_EXPNS_TYPE_CD AS INTEGER) = 10,
--        NO CASE, UNKNOWN
--    ),
--    RANGE_N(PERIOD_END_DT BETWEEN '2005-01-01' AND '2010-01-01' EACH INTERVAL '1' MONTH)  --MONTH        
--);


